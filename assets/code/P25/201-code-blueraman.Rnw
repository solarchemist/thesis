<<'0525P-blueraman-fityk0513-fits'>>=
blue.latex.assignments <- nonres0513.assignments
blue.assignments <-
   ## CAREFUL!! the order here MUST match the order in the exported *.peaks file
   list(
      T900 =
         c("E2h-E2l",   # 330
           "A1TO",      # 384
           "E2h",       # 438
           "A1LO",      # 582
           "2E2h+E2l",  # 981
           "2A1LO",     # 1160
           "E2h+E2l",   # 541
           "E2h+2E2l",  # 663
           "2E2l",      # 203
           "E1TO"),     # 411
      T800 =
         c("2A1LO",     # 1160
           "A1LO",      # 582
           "E2h",       # 438
           "E2h-E2l",   # 330
           "2E2l",      # 203
           "2E2h+E2l",  # 981
           "E2h+E2l",   # 541
           "A1TO"),     # 384
      T700 =
         c("2E1LO",     # 1143
           "A1LO",      # 582
           "E2h",       # 438
           "E2h-E2l",   # 330
           "2A1LO",     # 1160
           "E1LO",      # 574
           "2E2h+E2l",  # 981
           "2E2l",      # 203
           "E2h+E2l"),  # 541
      T600 =
         c("A1LO",      # 582
           "2A1LO",     # 1160
           "E2h",       # 438
           "E1LO",      # 574
           "E2h-E2l",   # 330
           "2E1LO",     # 1143
           "A1TO"),     # 384
      T500 =
         c("A1LO",      # 582
           "2A1LO",     # 1160
           "E2h",       # 438
           "E2h-E2l",   # 330
           "2E1LO",     # 1143
           "E1LO",      # 574
           "A1TO",      # 384
           "2E2h+E2l"), # 981
      T400 =
         c("A1LO",      # 582
           "2A1LO",     # 1160
           "E2h",       # 438
           "2E1LO",     # 1143
           "E2h-E2l",   # 330
           "E1LO"),     # 574
      T300 =
         c("A1LO",      # 582
           "2A1LO",     # 1160
           "E2h",       # 438
           "E1LO",      # 574
           "2E1LO",     # 1143
           "2E2h+E2l")) # 981
if (!file.exists(here::here("assets/data/P25/blueraman-fityk0513-dat.rda"))) {
   this.files <-
      list.files(
         here::here("assets/data/P25/405nm-200513"),
         pattern = "\\.dat$",
         full.names = TRUE)
   # note that files are listed in desc temperature, so order this.samples the same way
   this.samples <-
      samples5.wells %>%
      filter(temperature %in% seq(300, 900, 100)) %>%
      arrange(desc(temperature))
   # the Fityk dat files have different number of columns, depending on number of kernels (F(x))
   # that's one reason why we specified assignments for each spectrum above
   # we can now use the number of columns for read_table2(),
   # and the first and last column name for pivoting to long form
   # and join all spectra into a single tibble
   this.df <- NULL
   for (t in 1:length(blue.assignments)) {
      this.df <-
         bind_rows(
            this.df,
            readr::read_table2(
               file = this.files[t],
               col_names =
                  c("shift", "y", "a", "sum", "residuals", blue.assignments[[t]])) %>%
               pivot_longer(
                  cols = first(blue.assignments[[t]]):last(blue.assignments[[t]]),
                  names_to = "mode",
                  values_to = "y_fit") %>%
               add_column(
                  temperature = this.samples %>% pull(temperature) %>% nth(t))
         )
   }
   save(this.df, file = here::here("assets/data/P25/blueraman-fityk0513-dat.rda"))
} else {
   this.df <- common::LoadRData2Variable(
      path = here::here("assets/data/P25/blueraman-fityk0513-dat.rda"))
}
# join with samples.info using the temperature column to get some useful metadata
this.df <- left_join(
   this.df,
   samples.info %>% select(label, temperature, diameter, diameter_topas),
   by = "temperature")
blue.fityk0513 <-
   this.df %>%
   mutate(mode = factor(mode, levels = blue.latex.assignments$mode))
@


<<'0525P-blueraman-fityk0513-parameters-errors', warning=FALSE>>=
### This chunk produces warning message:
### In 'vctrs::vec_proxy_equal' : boolean operators not defined for 'errors' objects, uncertainty dropped
# Errors are only available for height, center, hwhm (not area)
# NOTE: any parameters that were LOCKED during the Fityk fitting will be ABSENT from the *.errors file as exported by Fityk
# Which in turns means that the number of rows in the errors file won't be an integer multiple of 3, which would
# throw off the simple loop below.
## Manually adjusted
## I've added 381 and 410 peaks in 800C errors file
if (!file.exists(here::here("assets/data/P25/blueraman-fityk0513-errors.rda"))) {
   this.files <-
      list.files(
         here::here("assets/data/P25/405nm-200513"),
         pattern = "\\.errors$",
         full.names = TRUE)
   this.samples <-
      samples.info %>% filter(temperature %in% seq(300, 900, 100)) %>% arrange(desc(temperature)) %>% pull(label)
   this.df <- NULL
   for (i in 1:length(this.files)) {
      # dynamically get the number of peaks in the current table (always three properties)
      number.peaks <-
         dim(read.table(this.files[i], skip = 1, sep = "="))[1] / 3
      this.df <-
         rbind(this.df,
               read.table(this.files[i], skip = 1, sep = "=") %>%
                  # sort by the peak number (sometimes Fityk jumbles the output order)
                  arrange(V1) %>%
                  # now we can drop the peak number column
                  select(-V1) %>%
                  # replace the "+-" separator with a single character so we can use separate()
                  mutate(V2 = sub(" +- ", ",", V2, fixed = TRUE)) %>%
                  separate(V2, sep = ",", into = c("value", "error")) %>%
                  # make sure value and error columns are numeric
                  mutate(value = as.numeric(value)) %>%
                  mutate(error = as.numeric(error)) %>%
                  # label each row by its property
                  mutate(property = rep(c("height", "center", "hwhm"), number.peaks)) %>%
                  add_column(peak = rep(seq(1, number.peaks), 1, each = 3)) %>%
                  # add sample id column
                  add_column(label = this.samples[i]))
   }
   this.df <-
      this.df %>%
      mutate(label = factor(label, levels = this.samples))
   save(this.df, file = here::here("assets/data/P25/blueraman-fityk0513-errors.rda"))
} else {
   this.df <- common::LoadRData2Variable(
      path = here::here("assets/data/P25/blueraman-fityk0513-errors.rda"))
}
# I think I will take the following approach here,
# to shape the errors dataframe into the same form as the parameters dataframe (next chunk) so that
# I can simply slot in new errors() columns for height, center and fwhm
this.df.witherrors <-
   pivot_wider(
      this.df,
      id_cols = c(peak, label),
      names_from = property,
      values_from = c(value, error)) %>%
   # we need to correct negative hwhm values to positive (only some are negative)
   # I am not sure why they are reported with a minus sign in Fityk's errors output, when they are
   # exactly twice as large and positive (as expected) in Fityk's *.peaks output as well as in the GUI itself.
   # Anyway, we need to flip any negative value_hwhm.
   mutate(value_fwhm = 2 * abs(value_hwhm)) %>% select(-value_hwhm) %>%
   mutate(error_fwhm = 2 * error_hwhm) %>% select(-error_hwhm) %>%
   # create errors vectors
   mutate(height = set_errors(value_height, error_height)) %>% select(-value_height, -error_height) %>%
   mutate(centroid = set_errors(value_center, error_center)) %>% select(-value_center, -error_center) %>%
   mutate(fwhm = set_errors(value_fwhm, error_fwhm)) %>% select(-value_fwhm, -error_fwhm) %>%
   arrange(label, centroid)
# the height, centroid and fwhm columns of this.df.witherrors are now setup to perfectly slot into fityk.params in the next chunk
@


<<'0525P-blueraman-fityk0513-parameters'>>=
if (!file.exists(here::here("assets/data/P25/blueraman-fityk0513-peaks.rda"))) {
   this.files <- list.files(
      path = here::here("assets/data/P25/405nm-200513"),
      pattern = "*.peaks",
      full.names = TRUE)
   # make sure to order samples.info in desc order by temperature to match this.files
   this.samples <-
      samples.info %>% filter(temperature %in% seq(300, 900, 100)) %>%
      select(label, temperature) %>% arrange(desc(temperature))
   # read the Fityk peak parameters for each spectrum
   this.df <- NULL
   for (s in 1:length(this.files)) {
      this.df <- rbind(
         this.df,
         read.table(
            this.files[s],
            skip = 1, # don't read the first line
            colClasses = c(rep(NA, 6), rep("NULL", 3)), # don't read the last three columns (fityk's output is verbose)
            col.names = c("pid", "type", "centroid", "height", "area", "fwhm", rep("", 3))) %>%
            add_column(
               temperature = this.samples %>% pull(temperature) %>% nth(s),
               mode = blue.assignments[[s]]) %>%
            # watch out, don't sort by by Raman shift *before* assigning modes (above)
            # because the peaks are not ordered by Raman shift in the *.peaks output files
            arrange(centroid) %>%
            # and for the same reason, join is necessary to correctly add the latex-modes
            left_join(
               blue.latex.assignments,
               by = "mode") %>%
            cbind(
               # read the Fityk fit *.info file
               read.table(file = sub("\\.peaks$", ".info", this.files[s])) %>%
                  separate(col = V1, into = c("key", "fit.WSSR"), sep = "=", convert = TRUE) %>%
                  separate(col = V2, into = c("key", "fit.DoF"), sep = "=", convert = TRUE) %>%
                  separate(col = V3, into = c("key", "fit.WSSR_DoF"), sep = "=", convert = TRUE) %>%
                  separate(col = V4, into = c("key", "fit.SSR"), sep = "=", convert = TRUE) %>%
                  separate(col = V5, into = c("key", "fit.R2"), sep = "=", convert = TRUE) %>%
                  # drop the remaining "key" column
                  select(-key)))
   }
   save(this.df, file = here::here("assets/data/P25/blueraman-fityk0513-peaks.rda"))
} else {
   this.df <- common::LoadRData2Variable(path = here::here("assets/data/P25/blueraman-fityk0513-peaks.rda"))
}
# join with samples.info using the temperature column to get some useful metadata
this.df <-
   left_join(
      this.df,
      samples.info %>% select(label, temperature, diameter, diameter_topas),
      by = "temperature")
blue.fityk0513.params <-
   this.df %>%
   mutate(mode = factor(mode, levels = blue.latex.assignments$mode)) %>%
   mutate(latex = factor(latex, levels = blue.latex.assignments$latex))
# replace centroid, height and FWHM with "errors" columns
blue.fityk0513.params$centroid <- this.df.witherrors$centroid
blue.fityk0513.params$height <- this.df.witherrors$height
blue.fityk0513.params$fwhm <- this.df.witherrors$fwhm
@


<<'0525P-blueraman-fityk0513-normalisation', warning=FALSE>>=
### This chunk produces warning message:
### In 'Ops' : non-'errors' operand automatically coerced to an 'errors' object with no uncertainty
# change tack. let's normalise both blue and green against the same mode
# we can pick A1LO or E2h, essentially. Let's go with A1LO.
blue0513.normalisation <-
   blue.fityk0513.params %>%
   # one important reason we split value and error into two columns is that max(height) does not return
   # the expected max value but instead the (value + error) and I haven't found another way around that.
   add_column(height_error = .$height %>% errors(), .after = "height") %>%
   mutate(height = height %>% as.numeric()) %>%
   pivot_wider(
      id_cols = c(temperature, label, diameter),
      names_from = mode,
      values_from = c(height, height_error)) %>%
   # rejoin errors for those columns which we want to calculate relheight
   mutate(A1LO = set_errors(height_A1LO, height_error_A1LO)) %>%
   # now divide height(A1LO) with max(height(A1LO)) for all samples
   select(temperature, label, diameter, A1LO) %>%
   mutate(n_factor = 1 / (A1LO / max(as.numeric(A1LO))))
@


<<'0525P-blueraman-fityk-fits'>>=
mkern <- data.frame(
   safe = c(
      "E2h_E2l",
      "A1TO",
      "E2h",
      "ifph",
      "E1LO",
      "A1LO",
      "NA625",
      "TA1TO",
      "E2h_E1LO",
      "TE1LO",
      "E1LO_A1LO",
      "TA1LO",
      "NA1754",
      "NA1335",
      "NA1511",
      "NA1604",
      "NA1876",
      "NA2204"),
   latex = c(
      "$E_{2(\\text{high})} - E_{2(\\text{low})}$",
      "$A_{1(\\text{TO})}$",
      "$E_{2(\\text{high})}$",
      "$\\text{if.\\,ph.}$",
      "$E_{1(\\text{LO})}$",
      "$A_{1(\\text{LO})}$",
      "NA(625)",
      "$2A_{1(\\text{TO})}$",
      "$E_{2(\\text{high})} + E_{1(\\text{LO})}$",
      "$2E_{1(\\text{LO})}$",
      "$E_{1(\\text{LO})} + A_{1(\\text{LO})}$",
      "$2A_{1(\\text{LO})}$",
      "NA(1754)",
      "NA(1335)",
      "NA(1511)",
      "NA(1604)",
      "NA(1876)",
      "NA(2204)"))
# Here modes must be given in order of increasing Raman shift
blue.modes <- list(
   T900 = c("E2h_E2l", "A1TO", "E2h", "ifph", "E1LO",
            "A1LO", "NA625", "TA1TO", "E2h_E1LO", "TE1LO", "E1LO_A1LO", "TA1LO"),
   T800 = c("E2h_E2l", "A1TO", "E2h", "ifph", "E1LO", "A1LO", "NA625",
            "TA1TO", "E2h_E1LO", "TE1LO", "E1LO_A1LO", "TA1LO"),
   T700 = c("E2h_E2l", "A1TO", "E2h", "ifph", "E1LO", "A1LO",
            "TA1TO", "E2h_E1LO", "TE1LO", "E1LO_A1LO", "TA1LO"),
   T600 = c("E2h_E2l", "A1TO", "E2h", "ifph", "E1LO", "A1LO",
            "TA1TO", "TE1LO", "E1LO_A1LO", "TA1LO"),
   T500 = c("E2h_E2l", "E2h", "ifph", "E1LO", "A1LO",
            "TA1TO", "TE1LO", "E1LO_A1LO", "TA1LO"),
   T400 = c("E2h_E2l", "E2h", "ifph", "E1LO", "A1LO",
            "TA1TO", "TE1LO", "E1LO_A1LO", "TA1LO", "NA1754"),
   T300 = c("E2h", "ifph", "E1LO", "A1LO", "TA1TO",
            "E2h_E1LO", "TE1LO", "E1LO_A1LO", "TA1LO",
            "NA1335", "NA1511", "NA1604", "NA1754", "NA1876", "NA2204"))
# blue.modes %>% unlist() %>% unique()
if (!file.exists(here::here("assets/data/P25/blueraman-fityk-dat.rda"))) {
   this.files <-
      list.files(
         here::here("assets/data/P25/191211-405nm"),
         pattern = "\\.dat$",
         full.names = TRUE)
   # complication: different number of columns in different .dat files because of varying number of kernels
   # known columns: first four always x, y, a, F[0](x) and last two always F(x), y-F(x)
   # we will have to specify column names for each input file
   # but by pivoting to longer first, then rbind, we can neatly join all dataframes into one
   this.df <- rbind(
      read.table(
         this.files[1],
         col.names =
            c("x", "y", "a",
              blue.modes$T900,
              "sum", "residuals")) %>%
         pivot_longer(cols = E2h_E2l:TA1LO, names_to = "mode", values_to = "y_fit") %>%
         add_column(temperature = 900),
      read.table(
         this.files[2],
         col.names =
            c("x", "y", "a",
              blue.modes$T800,
              "sum", "residuals")) %>%
         pivot_longer(cols = E2h_E2l:TA1LO, names_to = "mode", values_to = "y_fit") %>%
         add_column(temperature = 800),
      read.table(
         this.files[3],
         col.names =
            c("x", "y", "a",
              blue.modes$T700,
              "sum", "residuals")) %>%
         pivot_longer(cols = E2h_E2l:TA1LO, names_to = "mode", values_to = "y_fit") %>%
         add_column(temperature = 700),
      read.table(
         this.files[4],
         col.names =
            c("x", "y", "a",
              blue.modes$T600,
              "sum", "residuals")) %>%
         pivot_longer(cols = E2h_E2l:TA1LO, names_to = "mode", values_to = "y_fit") %>%
         add_column(temperature = 600),
      read.table(
         this.files[5],
         col.names =
            c("x", "y", "a",
              blue.modes$T500,
              "sum", "residuals")) %>%
         pivot_longer(cols = E2h_E2l:TA1LO, names_to = "mode", values_to = "y_fit") %>%
         add_column(temperature = 500),
      read.table(
         this.files[6],
         col.names =
            c("x", "y", "a",
              blue.modes$T400,
              "sum", "residuals")) %>%
         pivot_longer(cols = E2h_E2l:NA1754, names_to = "mode", values_to = "y_fit") %>%
         add_column(temperature = 400),
      read.table(
         this.files[7],
         col.names =
            c("x", "y", "a",
              blue.modes$T300,
              "sum", "residuals")) %>%
         pivot_longer(cols = E2h:NA2204, names_to = "mode", values_to = "y_fit") %>%
         add_column(temperature = 300)
   )
   save(this.df, file = here::here("assets/data/P25/blueraman-fityk-dat.rda"))
} else {
   this.df <- common::LoadRData2Variable(
      path = here::here("assets/data/P25/blueraman-fityk-dat.rda"))
}
# join with samples.info using the temperature column to get some useful metadata
this.df <- left_join(
   this.df,
   samples.info %>% select(label, temperature, diameter, diameter_topas),
   by = "temperature")
blue.fityk <- this.df
#' blue.fityk:
#' @param x wavenumber
#' @param y experimental intensity
#' @param a active or not (Fityk parameter)
#' @param sum model sum (Fityk)
#' @param residuals difference between model and sum (Fityk)
#' @param mode Raman mode
#' @param y_fit individual fitted peaks (Fityk)
#' @param temperature annealing temperature
#' @param label diameter and temperature
#' @param diameter factor
#' @param diameter_topas diameter with error
@


<<'0525P-blueraman-fityk-parameters-errors'>>=
# at this point, remember that the standard errors need to be collected from their own file *.errors
# whereas the kernel parameters themselves live in *.peaks
# These two filetypes are also formatted very differently
# Note that errors are only available for height, center, hwhm (not area)
if (!file.exists(here::here("assets/data/P25/blueraman-fityk-errors.rda"))) {
   this.files <- list.files(
      here::here("assets/data/P25/191211-405nm"),
      pattern = "\\.errors$",
      full.names = TRUE)
   # NOTE THESE FILES DO NOT INCLUDE THE 200C sample
   this.samples <-
      samples.info %>% filter(temperature != 200) %>%
      pull(label) %>% unique() %>% rev()
   this.df <- NULL
   for (i in 1:length(this.files)) {
      # dynamically get the number of peaks in the current table (always three properties)
      number.peaks <-
         dim(read.table(this.files[i], skip = 1, sep = "="))[1] / 3
      this.df <- rbind(
         this.df,
         read.table(this.files[i], skip = 1, sep = "=") %>%
            # drop the redundant first column
            select(-V1) %>%
            # replace the "+-" separator with a single character so we can use separate()
            mutate(V2 = sub(" +- ", ",", V2, fixed = TRUE)) %>%
            separate(V2, sep = ",", into = c("value", "error")) %>%
            # make sure value and error columns are numeric
            mutate(value = as.numeric(value)) %>%
            mutate(error = as.numeric(error)) %>%
            mutate(property = rep(c("height", "center", "hwhm"), number.peaks)) %>%
            add_column(peak = rep(seq(1, number.peaks), 1, each = 3)) %>%
            # add sample id column
            add_column(label = this.samples[i]))
   }
   this.df <-
      this.df %>%
      mutate(label = factor(label, levels = this.samples))
   save(this.df, file = here::here("assets/data/P25/blueraman-fityk-errors.rda"))
} else {
   this.df <- common::LoadRData2Variable(
      path = here::here("assets/data/P25/blueraman-fityk-errors.rda"))
}
# I think I will take the following approach here,
# to shape the errors dataframe into the same form as the parameters dataframe (next chunk) so that
# I can simply slot in new errors() columns for height, center and fwhm
this.df.witherrors <-
   pivot_wider(this.df, id_cols = c(peak, label), names_from = property, values_from = c(value, error)) %>%
   # we need to correct negative hwhm values to positive (only some are negative)
   # I am not sure why they are reported with a minus sign in Fityk's errors output, when they are
   # exactly twice as large and positive (as expected) in Fityk's *.peaks output as well as in the GUI itself.
   # Anyway, we need to flip any negative value_hwhm.
   mutate(value_fwhm = 2 * abs(value_hwhm)) %>% select(-value_hwhm) %>%
   mutate(error_fwhm = 2 * error_hwhm) %>% select(-error_hwhm) %>%
   # create errors vectors
   mutate(height = set_errors(value_height, error_height)) %>% select(-value_height, -error_height) %>%
   mutate(centroid = set_errors(value_center, error_center)) %>% select(-value_center, -error_center) %>%
   mutate(fwhm = set_errors(value_fwhm, error_fwhm)) %>% select(-value_fwhm, -error_fwhm) %>%
   arrange(label, centroid)
# the height, centroid and fwhm columns of this.df.witherrors are now setup perfectly to slot into blue.fityk.params in the next chunk
@


<<'0525P-blueraman-fityk-parameters'>>=
if (!file.exists(here::here("assets/data/P25/blueraman-fityk-peaks.rda"))) {
   this.files <-
      list.files(
         here::here("assets/data/P25/191211-405nm"),
         pattern = "\\.peaks$",
         full.names = TRUE)
   # read the Fityk peak parameters for each spectrum
   this.df <-
      rbind(
         read.table(
            this.files[1],
            # skip the first line
            skip = 1,
            # skip the last three columns (fityk's output is verbose)
            colClasses = c(rep(NA, 6), rep("NULL", 3)),
            col.names = c("pid", "type", "centroid", "height", "area", "fwhm", rep("", 3))) %>%
            arrange(centroid) %>%
            add_column(mode = blue.modes$T900,
                       mode.latex = mkern$latex[which(mkern$safe %in% blue.modes$T900)],
                       .before = "pid") %>%
            add_column(temperature = 900) %>%
         cbind(
            # read the Fityk fit info file
            read.table(file = sub("\\.peaks$", ".info", this.files[1])) %>%
            separate(col = V1, c("key", "fit.WSSR"), "=") %>%
            separate(col = V2, c("key", "fit.DoF"), "=") %>%
            separate(col = V3, c("key", "fit.WSSR_DoF"), "=") %>%
            separate(col = V4, c("key", "fit.SSR"), "=") %>%
            separate(col = V5, c("key", "fit.R2"), "=") %>%
            # drop the remaining "key" column
            select(-key)),
         read.table(
            this.files[2],
            skip = 1,
            colClasses = c(rep(NA, 6), rep("NULL", 3)),
            col.names = c("pid", "type", "centroid", "height", "area", "fwhm", rep("", 3))) %>%
            arrange(centroid) %>%
            add_column(mode = blue.modes$T800,
                       mode.latex = mkern$latex[which(mkern$safe %in% blue.modes$T800)],
                       .before = "pid") %>%
            add_column(temperature = 800) %>%
         cbind(
            # read the Fityk fit info file
            read.table(file = sub("\\.peaks$", ".info", this.files[2])) %>%
            separate(col = V1, c("key", "fit.WSSR"), "=") %>%
            separate(col = V2, c("key", "fit.DoF"), "=") %>%
            separate(col = V3, c("key", "fit.WSSR_DoF"), "=") %>%
            separate(col = V4, c("key", "fit.SSR"), "=") %>%
            separate(col = V5, c("key", "fit.R2"), "=") %>%
            # drop the remaining "key" column
            select(-key)),
         read.table(
            this.files[3],
            skip = 1,
            colClasses = c(rep(NA, 6), rep("NULL", 3)),
            col.names = c("pid", "type", "centroid", "height", "area", "fwhm", rep("", 3))) %>%
            arrange(centroid) %>%
            add_column(mode = blue.modes$T700,
                       mode.latex = mkern$latex[which(mkern$safe %in% blue.modes$T700)],
                       .before = "pid") %>%
            add_column(temperature = 700) %>%
         cbind(
            # read the Fityk fit info file
            read.table(file = sub("\\.peaks$", ".info", this.files[3])) %>%
            separate(col = V1, c("key", "fit.WSSR"), "=") %>%
            separate(col = V2, c("key", "fit.DoF"), "=") %>%
            separate(col = V3, c("key", "fit.WSSR_DoF"), "=") %>%
            separate(col = V4, c("key", "fit.SSR"), "=") %>%
            separate(col = V5, c("key", "fit.R2"), "=") %>%
            # drop the remaining "key" column
            select(-key)),
         read.table(
            this.files[4],
            skip = 1,
            colClasses = c(rep(NA, 6), rep("NULL", 3)),
            col.names = c("pid", "type", "centroid", "height", "area", "fwhm", rep("", 3))) %>%
            arrange(centroid) %>%
            add_column(mode = blue.modes$T600,
                       mode.latex = mkern$latex[which(mkern$safe %in% blue.modes$T600)],
                       .before = "pid") %>%
            add_column(temperature = 600) %>%
         cbind(
            # read the Fityk fit info file
            read.table(file = sub("\\.peaks$", ".info", this.files[4])) %>%
            separate(col = V1, c("key", "fit.WSSR"), "=") %>%
            separate(col = V2, c("key", "fit.DoF"), "=") %>%
            separate(col = V3, c("key", "fit.WSSR_DoF"), "=") %>%
            separate(col = V4, c("key", "fit.SSR"), "=") %>%
            separate(col = V5, c("key", "fit.R2"), "=") %>%
            # drop the remaining "key" column
            select(-key)),
         read.table(
            this.files[5],
            skip = 1,
            colClasses = c(rep(NA, 6), rep("NULL", 3)),
            col.names = c("pid", "type", "centroid", "height", "area", "fwhm", rep("", 3))) %>%
            arrange(centroid) %>%
            add_column(mode = blue.modes$T500,
                       mode.latex = mkern$latex[which(mkern$safe %in% blue.modes$T500)],
                       .before = "pid") %>%
            add_column(temperature = 500) %>%
         cbind(
            # read the Fityk fit info file
            read.table(file = sub("\\.peaks$", ".info", this.files[5])) %>%
            separate(col = V1, c("key", "fit.WSSR"), "=") %>%
            separate(col = V2, c("key", "fit.DoF"), "=") %>%
            separate(col = V3, c("key", "fit.WSSR_DoF"), "=") %>%
            separate(col = V4, c("key", "fit.SSR"), "=") %>%
            separate(col = V5, c("key", "fit.R2"), "=") %>%
            # drop the remaining "key" column
            select(-key)),
         read.table(
            this.files[6],
            skip = 1,
            colClasses = c(rep(NA, 6), rep("NULL", 3)),
            col.names = c("pid", "type", "centroid", "height", "area", "fwhm", rep("", 3))) %>%
            arrange(centroid) %>%
            add_column(mode = blue.modes$T400,
                       mode.latex = mkern$latex[which(mkern$safe %in% blue.modes$T400)],
                       .before = "pid") %>%
            add_column(temperature = 400) %>%
         cbind(
            # read the Fityk fit info file
            read.table(file = sub("\\.peaks$", ".info", this.files[6])) %>%
            separate(col = V1, c("key", "fit.WSSR"), "=") %>%
            separate(col = V2, c("key", "fit.DoF"), "=") %>%
            separate(col = V3, c("key", "fit.WSSR_DoF"), "=") %>%
            separate(col = V4, c("key", "fit.SSR"), "=") %>%
            separate(col = V5, c("key", "fit.R2"), "=") %>%
            # drop the remaining "key" column
            select(-key)),
         read.table(
            this.files[7],
            skip = 1,
            colClasses = c(rep(NA, 6), rep("NULL", 3)),
            col.names = c("pid", "type", "centroid", "height", "area", "fwhm", rep("", 3))) %>%
            arrange(centroid) %>%
            add_column(mode = blue.modes$T300,
                       mode.latex = mkern$latex[which(mkern$safe %in% blue.modes$T300)],
                       .before = "pid") %>%
            add_column(temperature = 300) %>%
         cbind(
            # read the Fityk fit info file
            read.table(file = sub("\\.peaks$", ".info", this.files[7])) %>%
            separate(col = V1, c("key", "fit.WSSR"), "=") %>%
            separate(col = V2, c("key", "fit.DoF"), "=") %>%
            separate(col = V3, c("key", "fit.WSSR_DoF"), "=") %>%
            separate(col = V4, c("key", "fit.SSR"), "=") %>%
            separate(col = V5, c("key", "fit.R2"), "=") %>%
            # drop the remaining "key" column
            select(-key))
      )
   # join with samples.info using the temperature column to get some useful metadata
   this.df <-
      left_join(this.df,
                samples.info %>% select(label, temperature, diameter, diameter_topas),
                by = "temperature")
   blue.fityk.params <- this.df
   # replace centroid, height and FWHM with "errors" columns
   blue.fityk.params$centroid <- this.df.witherrors$centroid
   blue.fityk.params$height <- this.df.witherrors$height
   blue.fityk.params$fwhm <- this.df.witherrors$fwhm
   save(blue.fityk.params, file = here::here("assets/data/P25/blueraman-fityk-peaks.rda"))
} else {
   blue.fityk.params <- common::LoadRData2Variable(
      path = here::here("assets/data/P25/blueraman-fityk-peaks.rda"))
}
#
blue.normalisation <-
   blue.fityk.params %>%
   # one important reason we split value and error into two columns is that max(height) does not return
   # the expected max value but instead the (value + error) and I haven't found another way around that.
   add_column(height_error = .$height %>% errors(), .after = "height") %>%
   mutate(height = height %>% as.numeric()) %>%
   pivot_wider(id_cols = c(temperature, label, diameter),
               names_from = mode,
               values_from = c(height, height_error)) %>%
   # rejoin errors for the columns we need to calculate relheight
   mutate(A1LO = set_errors(height_A1LO, height_error_A1LO)) %>%
   # now divide height(A1LO) with max(height(A1LO)) for all samples
   select(temperature, label, diameter, A1LO) %>%
   mutate(n_factor = 1 / (A1LO / max(as.numeric(A1LO))))
@
